name: Monitor DO OpenAPI Database Changes

on:
  schedule:
    # Run every 12 hours
    - cron: '0 */12 * * *'
  workflow_dispatch:  # Allow manual triggers

jobs:
  check-openapi-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      # Configure Git first, before any Git operations
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest commit info
        id: get-commit
        run: |
          COMMIT_INFO=$(curl -s "https://api.github.com/repos/digitalocean/openapi/commits?path=specification/resources/databases/models/advanced_config&page=1&per_page=1")
          LATEST_SHA=$(echo "$COMMIT_INFO" | jq -r '.[0].sha')
          # Escape newlines and quotes in commit message
          COMMIT_MESSAGE=$(echo "$COMMIT_INFO" | jq -r '.[0].commit.message' | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}')
          COMMIT_URL=$(echo "$COMMIT_INFO" | jq -r '.[0].html_url')
          echo "latest_sha=$LATEST_SHA" >> $GITHUB_OUTPUT
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "commit_url=$COMMIT_URL" >> $GITHUB_OUTPUT

      - name: Check if PR exists
        id: check-pr
        run: |
          # Get the count of PRs matching the commit SHA
          PR_COUNT=$(gh pr list --state all --search ${{ steps.get-commit.outputs.latest_sha }} --json number --jq length)
          echo "Number of matching PRs found: $PR_COUNT"
          echo "exists=$PR_COUNT" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create branch and PR if needed
        if: steps.check-pr.outputs.exists == '0'
        run: |
          # Create a new branch
          BRANCH_NAME="do-openapi-update-${{ steps.get-commit.outputs.latest_sha }}"
          git checkout -b $BRANCH_NAME

          # Create a commit marker file or update existing one
          echo "${{ steps.get-commit.outputs.latest_sha }}" > .do-openapi-commit
          git add .do-openapi-commit
          git commit -m "Track DO OpenAPI database config update"

          # Push branch
          git push origin $BRANCH_NAME

          # Create PR with properly escaped commit message
          gh pr create \
            --title "DO OpenAPI Database Config Update: ${{ steps.get-commit.outputs.latest_sha }}" \
            --body "This PR tracks changes to the DigitalOcean OpenAPI database configuration.

            Latest commit: ${{ steps.get-commit.outputs.commit_message }}
            
            Commit URL: ${{ steps.get-commit.outputs.commit_url }}

            Please review the changes in the OpenAPI specification and update the application accordingly."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}